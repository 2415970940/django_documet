the first day
making queries
link : https://docs.djangoproject.com/en/2.0/topics/db/queries/

Once you’ve created your data models, Django automatically gives 
you a database-abstraction API that lets you create, retrieve,
update and delete objects.
 
 
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    n_comments = models.IntegerField()
    n_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):
        return self.headline
		
ForeignKey   manyToOne
entry = Entry.objects.get(id=)
entry.blog.tagline
反向追溯
blog = Blog.objects.get(tagline="xx")
blog.entry_set.all()

ManyToManyField
entry = Entry.objects.get(id=)
entry.Author.all()
反向追溯
a = Author.objects.filter(name=)
a.entry_set.all()


Creating objects
>>> from blog.models import Blog
>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
>>> b.save()

Saving ForeignKey and ManyToManyField fields
>>> from blog.models import Blog, Entry
>>> entry = Entry.objects.get(pk=1)
>>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
>>> entry.blog = cheese_blog
>>> entry.save()

>>> from blog.models import Author
>>> joe = Author.objects.create(name="Joe")
>>> entry.authors.add(joe)

ManyToManyField   add()

>>> john = Author.objects.create(name="John")
>>> paul = Author.objects.create(name="Paul")
>>> george = Author.objects.create(name="George")
>>> ringo = Author.objects.create(name="Ringo")
>>> entry.authors.add(john, paul, george, ringo)

You get a QuerySet by using your model’s Manager. 
Each model has at least one Manager,and it’s called objects by default.

Retrieving all objects
>>> all_entries = Entry.objects.all()

Retrieving specific objects with filters

filter(**kwargs)
Returns a new QuerySet containing objects that match the given lookup parameters.

exclude(**kwargs)
Returns a new QuerySet containing objects that do not match the given lookup parameters.

Entry.objects.filter(pub_date__year=2006)   the same as:
Entry.objects.all().filter(pub_date__year=2006)

Chaining filters
>>> Entry.objects.filter(
...     headline__startswith='What'
... ).exclude(
...     pub_date__gte=datetime.date.today()
... ).filter(
...     pub_date__gte=datetime.date(2005, 1, 30)
... )

Limiting QuerySets
This returns the sixth through tenth objects (OFFSET 5 LIMIT 5):
>>> Entry.objects.all()[5:10]
Negative indexing (i.e. Entry.objects.all()[-1]) is not supported.
Generally, slicing a QuerySet returns a new QuerySet – it doesn’t evaluate the query. 
An exception is if you use the “step” parameter of Python slice syntax.
>>> Entry.objects.all()[:10:2]

Further filtering or ordering of a sliced queryset is prohibited due to the ambiguous nature of how that might work.



>>> Entry.objects.order_by('headline')[0]
This is roughly equivalent to:
>>> Entry.objects.order_by('headline')[0:1].get()

Retrieving a single object with get()
one_entry = Entry.objects.get(pk=1)
 if there is no Entry object with a primary key of 1, Django will raise Entry.DoesNotExist.
 if more than one item matches the get() query, Django will raise MultipleObjectsReturned


Field lookups
>>> Entry.objects.filter(pub_date__lte='2006-01-01')
ForeignKey
>>> Entry.objects.filter(blog_id=4)



